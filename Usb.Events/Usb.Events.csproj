<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LangVersion>8.0</LangVersion>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <PropertyGroup>
    <Product>Usb.Events</Product>
    <PackageId>Usb.Events</PackageId>
    <PackageVersion>11.0.0.0</PackageVersion>
    <Version>11.0.0.0</Version>
    <Authors>Jinjinov</Authors>
    <Description>Subscribe to events to be notified when a USB drive is mounted in or ejected, or when a USB device is added or removed. Usb.Events is a .NET Standard 2.0 library and uses WMI on Windows, libudev on Linux and IOKit on macOS.</Description>
    <Copyright>Copyright (c) Jinjinov 2022</Copyright>
    <PackageProjectUrl>https://github.com/Jinjinov/Usb.Events</PackageProjectUrl>
    <!--<PackageIcon></PackageIcon>-->
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <RepositoryUrl>https://github.com/Jinjinov/Usb.Events.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>USB;Event;Insert;Remove;NET Standard;Windows;Linux;macOS</PackageTags>
    <!--<PackageReleaseNotes></PackageReleaseNotes>-->
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Management" Version="7.0.0" />
  </ItemGroup>

  <Target Name="BuildNative" Condition="'$(OS)' != 'Windows_NT'" BeforeTargets="Build">

    <MakeDir Directories="x86/$(Configuration);x64/$(Configuration);arm/$(Configuration);arm64/$(Configuration)" />

    <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
      <Flags>-shared -g -D DEBUG</Flags>
    </PropertyGroup>
    <PropertyGroup Condition="'$(Configuration)' == 'Release'">
      <Flags>-shared</Flags>
    </PropertyGroup>

    <Exec Command="getconf LONG_BIT" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="LongBit" />
    </Exec>

    <Exec Command="arch" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="Arch" />
    </Exec>

    <PropertyGroup>
      <IsIntel Condition="'$(Arch)' == 'i386' or '$(Arch)' == 'x86_64' or '$(Arch)' == 'i686' or '$(Arch)' == 'amd64'">true</IsIntel>
      <IsArm Condition="'$(Arch)' == 'arm' or '$(Arch)' == 'arm64' or '$(Arch)' == 'armv6l' or '$(Arch)' == 'armv7l' or '$(Arch)' == 'armv8l' or '$(Arch)' == 'aarch64'">true</IsArm>
      <Is32Bit Condition="'$(Arch)' == 'i386' or '$(Arch)' == 'i686' or '$(Arch)' == 'arm' or '$(Arch)' == 'armv6l' or '$(Arch)' == 'armv7l'">true</Is32Bit>
      <Is64Bit Condition="'$(Arch)' == 'x86_64' or '$(Arch)' == 'amd64' or '$(Arch)' == 'arm64' or '$(Arch)' == 'armv8l' or '$(Arch)' == 'aarch64'">true</Is64Bit>
    </PropertyGroup>

    <Exec Condition="$([MSBuild]::IsOSPlatform('OSX')) And ('$(LongBit)' == '32')"
          WorkingDirectory=".\"
          Command="gcc -m32 $(Flags) ./Mac/UsbEventWatcher.Mac.c -o ./x86/$(Configuration)/UsbEventWatcher.Mac.dylib -framework CoreFoundation -framework DiskArbitration -framework IOKit" />

    <Exec Condition="$([MSBuild]::IsOSPlatform('Linux'))"
          WorkingDirectory=".\"
          Command="gcc -m32 $(Flags) ./Linux/UsbEventWatcher.Linux.c -o ./x86/$(Configuration)/UsbEventWatcher.Linux.so -ludev -fPIC" />

    <Exec Condition="$([MSBuild]::IsOSPlatform('Linux'))"
          WorkingDirectory=".\"
          Command="arm-linux-gnueabi-gcc -march=armv7-a $(Flags) ./Linux/UsbEventWatcher.Linux.c -o ./arm/$(Configuration)/UsbEventWatcher.Linux.so -ludev -fPIC" />

    <Exec Condition="$([MSBuild]::IsOSPlatform('OSX')) And ('$(LongBit)' == '64')"
          WorkingDirectory=".\"
          Command="gcc -m64 $(Flags) ./Mac/UsbEventWatcher.Mac.c -o ./x64/$(Configuration)/UsbEventWatcher.Mac.dylib -framework CoreFoundation -framework DiskArbitration -framework IOKit" />

    <Exec Condition="$([MSBuild]::IsOSPlatform('Linux')) And ('$(LongBit)' == '64')"
          WorkingDirectory=".\"
          Command="gcc -m64 $(Flags) ./Linux/UsbEventWatcher.Linux.c -o ./x64/$(Configuration)/UsbEventWatcher.Linux.so -ludev -fPIC" />

    <Exec Condition="$([MSBuild]::IsOSPlatform('Linux')) And ('$(LongBit)' == '64')"
          WorkingDirectory=".\"
          Command="aarch64-linux-gnu-gcc -march=armv8-a $(Flags) ./Linux/UsbEventWatcher.Linux.c -o ./arm64/$(Configuration)/UsbEventWatcher.Linux.so -ludev -fPIC" />
  </Target>

  <Target Name="BuildNativeArm" Condition="'$(OS)' == 'Windows_NT'" BeforeTargets="Build">

    <Exec Command="docker version --format '{{.Server.Version}}'" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="DockerExitCode" />
      <Output TaskParameter="ConsoleOutput" PropertyName="DockerVersion" />
    </Exec>

    <PropertyGroup>
      <DockerInstalled Condition="'$(DockerExitCode)' == '0'">true</DockerInstalled>
      <DockerNotInstalled Condition="'$(DockerExitCode)' != '0'">true</DockerNotInstalled>
    </PropertyGroup>

    <Message Importance="High" Text="Docker Installed: $(DockerVersion)" Condition="'$(DockerInstalled)' == 'true'" />
    <Message Importance="High" Text="Docker Not Installed" Condition="'$(DockerNotInstalled)' == 'true'" />

    <MakeDir Directories="arm/$(Configuration);arm64/$(Configuration)" />

    <PropertyGroup>
      <DockerImageName>usb-event-watcher-arm</DockerImageName>
      <DockerContainerName>usb-event-watcher-arm-container</DockerContainerName>
    
  </PropertyGroup>

    <Exec Condition="'$(DockerInstalled)' == 'true'"
          WorkingDirectory=".\"
          Command="docker build -t $(DockerImageName) ." />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
          WorkingDirectory=".\"
          Command="docker run --name $(DockerContainerName) -v arm:/arm -v arm64:/arm64 $(DockerImageName)" />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
          WorkingDirectory=".\"
          Command="docker cp $(DockerContainerName):/root/UsbEventWatcher.Linux.so ./arm64/UsbEventWatcher.Linux.so" />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
          WorkingDirectory=".\"
          Command="docker stop $(DockerContainerName)" />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
          WorkingDirectory=".\"
          Command="docker rm $(DockerContainerName)" />

  </Target>

  <ItemGroup>
    <None Include="./x86/$(Configuration)/UsbEventWatcher.Mac.dylib" Condition="Exists('./x86/$(Configuration)/UsbEventWatcher.Mac.dylib')">
      <Pack>true</Pack>
      <PackagePath>runtimes\osx-x86\native</PackagePath>
      <CopyToOutputDirectory Condition="!$([System.Environment]::Is64BitOperatingSystem)">PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Mac.dylib</Link>
    </None>

    <None Include="./x86/$(Configuration)/UsbEventWatcher.Linux.so" Condition="Exists('./x86/$(Configuration)/UsbEventWatcher.Linux.so')">
      <Pack>true</Pack>
      <PackagePath>runtimes\linux-x86\native</PackagePath>
      <CopyToOutputDirectory Condition="!$([System.Environment]::Is64BitOperatingSystem)">PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Linux.so</Link>
    </None>

    <None Include="./arm/$(Configuration)/UsbEventWatcher.Linux.so" Condition="Exists('./arm/$(Configuration)/UsbEventWatcher.Linux.so')">
      <Pack>true</Pack>
      <PackagePath>runtimes\linux-arm\native</PackagePath>
      <CopyToOutputDirectory Condition="!$([System.Environment]::Is64BitOperatingSystem)">PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Linux.so</Link>
    </None>

    <None Include="./x64/$(Configuration)/UsbEventWatcher.Mac.dylib" Condition="Exists('./x64/$(Configuration)/UsbEventWatcher.Mac.dylib')">
      <Pack>true</Pack>
      <PackagePath>runtimes\osx-x64\native</PackagePath>
      <CopyToOutputDirectory Condition="$([System.Environment]::Is64BitOperatingSystem)">PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Mac.dylib</Link>
    </None>

    <None Include="./x64/$(Configuration)/UsbEventWatcher.Linux.so" Condition="Exists('./x64/$(Configuration)/UsbEventWatcher.Linux.so')">
      <Pack>true</Pack>
      <PackagePath>runtimes\linux-x64\native</PackagePath>
      <CopyToOutputDirectory Condition="$([System.Environment]::Is64BitOperatingSystem)">PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Linux.so</Link>
    </None>

    <None Include="./arm64/$(Configuration)/UsbEventWatcher.Linux.so" Condition="Exists('./arm64/$(Configuration)/UsbEventWatcher.Linux.so')">
      <Pack>true</Pack>
      <PackagePath>runtimes\linux-arm64\native</PackagePath>
      <CopyToOutputDirectory Condition="$([System.Environment]::Is64BitOperatingSystem)">PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Linux.so</Link>
    </None>
  </ItemGroup>

</Project>
